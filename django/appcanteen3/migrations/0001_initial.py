# Generated by Django 5.0.3 on 2024-03-14 08:29

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MenuList',
            fields=[
                ('mitem_id', models.AutoField(primary_key=True, serialize=False)),
                ('mitem_name', models.CharField(max_length=50)),
                ('mcanteen_id', models.IntegerField(blank=True, null=True)),
                ('mprice', models.FloatField()),
                ('mdiscountprice', models.FloatField()),
                ('mimage', models.ImageField(blank=True, null=True, upload_to='media/')),
                ('description', models.CharField(max_length=55)),
                ('categories', models.CharField(max_length=55)),
                ('quantity', models.IntegerField()),
                ('availability_status', models.BooleanField(default=True)),
                ('mrating', models.IntegerField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('otp', models.CharField(blank=True, max_length=20, null=True)),
                ('phoneno', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(blank=True, default='ACTIVE', max_length=20, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updates_at', models.DateTimeField(auto_now=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CanteenProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(default='canteen', max_length=50)),
                ('canteen_id', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('canteen_name', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('canteen_place', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('status', models.CharField(blank=True, default='ACTIVE', max_length=20, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updates_at', models.DateTimeField(auto_now=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderPlaced',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mcanteen_id', models.IntegerField()),
                ('order_id', models.CharField(blank=True, default='', max_length=40)),
                ('total_price', models.FloatField()),
                ('payment', models.CharField(max_length=55)),
                ('order_status', models.CharField(default='undelivered', max_length=55)),
                ('order_date', models.DateField()),
                ('order_time', models.TimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_orders', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemid', models.CharField(max_length=45)),
                ('itemprice', models.DecimalField(decimal_places=2, max_digits=10)),
                ('itemcount', models.IntegerField(blank=True, null=True)),
                ('subtotal', models.FloatField()),
                ('itemImage', models.ImageField(blank=True, null=True, upload_to='orderimages/')),
                ('itemname', models.CharField(blank=True, max_length=45)),
                ('order_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='appcanteen3.orderplaced')),
            ],
        ),
        migrations.CreateModel(
            name='RatingAndReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.FloatField()),
                ('review', models.CharField(max_length=100)),
                ('r_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appcanteen3.canteenprofile')),
                ('ritem_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='appcanteen3.menulist')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(default='staff', max_length=50)),
                ('staff_id', models.CharField(blank=True, max_length=10, null=True, unique='True')),
                ('staff_name', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('staff_place', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('status', models.CharField(blank=True, default='ACTIVE', max_length=20, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updates_at', models.DateTimeField(auto_now=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(default='student', max_length=50)),
                ('student_admno', models.CharField(blank=True, default='', max_length=10, null=True)),
                ('name', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('student_place', models.CharField(blank=True, default='', max_length=40, null=True)),
                ('status', models.CharField(blank=True, default='ACTIVE', max_length=20, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updates_at', models.DateTimeField(auto_now=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=50, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('session_dict', models.TextField(default='{}')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='auth_tokens', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
    ]
